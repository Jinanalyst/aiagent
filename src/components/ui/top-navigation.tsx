"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import {
  ArrowLeft,
  Zap,
  ChevronDown,
  Rocket,
  Download,
  FileText,
  Github,
  Code2,
  Database,
  Settings,
  Webhook,
  Cloud,
  Share2,
  Check,
  Copy,
  ExternalLink
} from 'lucide-react';

interface TopNavigationProps {
  projectTitle?: string;
  subtitle?: string;
  onDeploy?: () => void;
  onAIAction?: () => void;
  userCredits?: number;
  isDeployEnabled?: boolean;
  showBackButton?: boolean;
  projectFiles?: Record<string, string>;
  projectName?: string;
}

export function TopNavigation({
  projectTitle = "AI Code Generator",
  subtitle,
  onDeploy,
  onAIAction,
  userCredits,
  isDeployEnabled = true,
  showBackButton = true,
  projectFiles = {},
  projectName = "My Project"
}: TopNavigationProps) {
  const router = useRouter();
  const [isIntegrationsOpen, setIsIntegrationsOpen] = useState(false);
  const [isExportOpen, setIsExportOpen] = useState(false);
  const [copySuccess, setCopySuccess] = useState('');

  const handleBack = () => {
    router.back();
  };

  const handleDownloadZip = async () => {
    try {
      const JSZip = (await import('jszip')).default;
      const zip = new JSZip();
      
      // Add all project files to the ZIP
      Object.entries(projectFiles).forEach(([path, content]) => {
        zip.file(path, content);
      });
      
      // Add a README with project info
      const readmeContent = `# ${projectName}

## Project Structure
This project was generated using AI and contains the following files:

${Object.keys(projectFiles).map(path => `- ${path}`).join('\n')}

## Getting Started
1. Extract all files to your project directory
2. Install dependencies if needed (npm install)
3. Run the development server

Generated on: ${new Date().toLocaleString()}
      `;
      
      zip.file('README.md', readmeContent);
      
      // Generate the ZIP file
      const zipBlob = await zip.generateAsync({ type: 'blob' });
      
      // Download the ZIP file
      const url = URL.createObjectURL(zipBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${projectName.replace(/\s+/g, '-').toLowerCase()}-project.zip`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      setCopySuccess('ZIP Downloaded!');
      setTimeout(() => setCopySuccess(''), 2000);
    } catch (error) {
      console.error('Download failed:', error);
      setCopySuccess('Download failed');
      setTimeout(() => setCopySuccess(''), 2000);
    }
  };

  const handlePushToGitHub = () => {
    // Create a GitHub repository with pre-filled information
    const repoName = projectName.replace(/\s+/g, '-').toLowerCase();
    const description = `AI-generated project: ${projectName}`;
    const githubUrl = `https://github.com/new?name=${encodeURIComponent(repoName)}&description=${encodeURIComponent(description)}&visibility=public`;
    
    window.open(githubUrl, '_blank');
    
    // Show instructions for pushing code
    setTimeout(() => {
      alert(`Repository "${repoName}" is being created on GitHub.\n\nAfter creating the repository:\n1. Download the ZIP file first\n2. Extract it to your local machine\n3. Follow GitHub's instructions to push the code\n\nGit commands will be:\ngit init\ngit add .\ngit commit -m "Initial commit"\ngit remote add origin [your-repo-url]\ngit push -u origin main`);
    }, 1000);
  };

  const handleExportCode = async () => {
    try {
      const header = `/*
 * ${projectName}
 * Generated by AI Code Generator
 * Date: ${new Date().toLocaleString()}
 * Files: ${Object.keys(projectFiles).length}
 */

`;
      
      const allCode = Object.entries(projectFiles).map(([path, content]) => {
        const fileExtension = path.split('.').pop() || '';
        const language = fileExtension === 'tsx' ? 'TypeScript React' : 
                        fileExtension === 'ts' ? 'TypeScript' :
                        fileExtension === 'jsx' ? 'JavaScript React' :
                        fileExtension === 'js' ? 'JavaScript' :
                        fileExtension === 'css' ? 'CSS' :
                        fileExtension === 'html' ? 'HTML' :
                        fileExtension.toUpperCase();
        
        return `// ========================================
// File: ${path}
// Language: ${language}
// Lines: ${content.split('\n').length}
// ========================================

${content}`;
      }).join('\n\n');
      
      const fullExport = header + allCode + '\n\n// End of export';
      
      await navigator.clipboard.writeText(fullExport);
      setCopySuccess(`${Object.keys(projectFiles).length} files copied!`);
      setTimeout(() => setCopySuccess(''), 2000);
    } catch (error) {
      console.error('Copy failed:', error);
      setCopySuccess('Copy failed');
      setTimeout(() => setCopySuccess(''), 2000);
    }
  };

  const handleShareLink = async () => {
    try {
      const projectData = {
        name: projectName,
        files: projectFiles,
        timestamp: Date.now(),
        fileCount: Object.keys(projectFiles).length,
        description: `Shared project: ${projectName} with ${Object.keys(projectFiles).length} files`
      };
      
      // Create a compressed data string
      const dataString = JSON.stringify(projectData);
      const encodedData = btoa(encodeURIComponent(dataString)); // Base64 encode for URL safety
      
      const shareUrl = `${window.location.origin}/project/shared?id=${encodedData}`;
      
      // Try modern Web Share API first
      if (navigator.share && navigator.canShare && navigator.canShare({ url: shareUrl })) {
        await navigator.share({
          title: `${projectName} - AI Generated Project`,
          text: `Check out this AI-generated project: ${projectName}`,
          url: shareUrl,
        });
        setCopySuccess('Shared!');
      } else {
        // Fallback to clipboard
        await navigator.clipboard.writeText(shareUrl);
        setCopySuccess('Share link copied!');
      }
      
      setTimeout(() => setCopySuccess(''), 2000);
    } catch (error) {
      console.error('Share failed:', error);
      setCopySuccess('Share failed');
      setTimeout(() => setCopySuccess(''), 2000);
    }
  };

  const handleViewSource = () => {
    const codeContent = Object.entries(projectFiles).map(([path, content]) => 
      `<h2>${path}</h2><pre><code>${content}</code></pre>`
    ).join('');
    
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${projectName} - Source Code</title>
          <style>
            body { font-family: 'Courier New', monospace; padding: 20px; background: #1a1a1a; color: #e0e0e0; }
            h2 { color: #4a9eff; border-bottom: 1px solid #333; padding-bottom: 10px; }
            pre { background: #0a0a0a; padding: 15px; border-radius: 8px; overflow-x: auto; }
            code { color: #e0e0e0; }
          </style>
        </head>
        <body>
          <h1>${projectName} - Source Code</h1>
          ${codeContent}
        </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    window.open(url, '_blank');
  };

  const handleGitHubIntegration = () => {
    window.open('https://github.com/settings/applications', '_blank');
  };

  const handleSupabaseIntegration = () => {
    window.open('https://supabase.com/dashboard', '_blank');
  };

  const handleWebhookIntegration = () => {
    const webhookInfo = `Webhook Integration Guide:

1. Set up API endpoints in your project
2. Configure webhook URLs for external services
3. Add authentication and validation
4. Test webhook delivery

Popular webhook services:
• GitHub Webhooks (for CI/CD)
• Stripe Webhooks (for payments)
• Discord/Slack Webhooks (for notifications)

Would you like to add webhook handling to your project?`;
    
    if (confirm(webhookInfo + '\n\nOpen webhook documentation?')) {
      window.open('https://docs.github.com/en/developers/webhooks-and-events/webhooks', '_blank');
    }
  };

  const handleVercelIntegration = () => {
    // Pre-fill Vercel deployment with project name
    const vercelUrl = `https://vercel.com/new?utm_source=ai-generator&project-name=${encodeURIComponent(projectName.replace(/\s+/g, '-').toLowerCase())}`;
    window.open(vercelUrl, '_blank');
    
    setTimeout(() => {
      alert('Deploying to Vercel:\n\n1. Connect your GitHub repository\n2. Configure build settings\n3. Add environment variables if needed\n4. Deploy your project\n\nTip: Download the ZIP file first and push to GitHub for easier deployment!');
    }, 1000);
  };

  const handleEnvironmentConfig = () => {
    const envInfo = `Environment Variables Guide:

Common variables for ${projectName}:
• DATABASE_URL (for database connections)
• API_KEY (for external APIs)
• SECRET_KEY (for authentication)
• NODE_ENV (development/production)

Best practices:
✓ Use .env files for local development
✓ Never commit secrets to git
✓ Use different values for dev/prod
✓ Validate required variables on startup`;

    if (confirm(envInfo + '\n\nWould you like to see environment setup examples?')) {
      // Create and show an example .env file
      const exampleEnv = `# Example .env file for ${projectName}
# Copy this to .env and fill in your actual values

DATABASE_URL=your_database_url_here
API_KEY=your_api_key_here
SECRET_KEY=your_secret_key_here
NODE_ENV=development

# Add other environment variables as needed
`;
      
      const blob = new Blob([exampleEnv], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = '.env.example';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      setCopySuccess('Example .env downloaded!');
      setTimeout(() => setCopySuccess(''), 3000);
    }
  };

  const handleManageIntegrations = () => {
    router.push('/settings?tab=integrations');
  };

  const handleEnhancedAIAction = () => {
    if (onAIAction) {
      onAIAction();
    }
    
    const actions = [
      'Focus on chat input',
      'Suggest improvements',
      'Optimize code',
      'Add features',
      'Fix bugs'
    ];
    
    const chatInput = document.querySelector('textarea');
    if (chatInput) {
      chatInput.focus();
      if (chatInput.getAttribute('placeholder')) {
        chatInput.setAttribute('placeholder', 'Try: "Add a contact form to this project" or "Make it mobile responsive"');
      }
    }
  };

  const integrations = [
    { 
      icon: Github, 
      label: 'GitHub', 
      description: 'Connect repository',
      onClick: handleGitHubIntegration
    },
    { 
      icon: Database, 
      label: 'Supabase', 
      description: 'Database integration',
      onClick: handleSupabaseIntegration
    },
    { 
      icon: Webhook, 
      label: 'Webhooks', 
      description: 'API endpoints',
      onClick: handleWebhookIntegration
    },
    { 
      icon: Cloud, 
      label: 'Vercel', 
      description: 'Deployment platform',
      onClick: handleVercelIntegration
    },
    { 
      icon: Settings, 
      label: 'Environment', 
      description: 'Config variables',
      onClick: handleEnvironmentConfig
    },
  ];

  const exportOptions = [
    { 
      icon: Download, 
      label: 'Download ZIP', 
      description: 'Get project files',
      onClick: handleDownloadZip
    },
    { 
      icon: Github, 
      label: 'Push to GitHub', 
      description: 'Create repository',
      onClick: handlePushToGitHub
    },
    { 
      icon: FileText, 
      label: 'Export Code', 
      description: 'Copy to clipboard',
      onClick: handleExportCode
    },
    { 
      icon: Share2, 
      label: 'Share Link', 
      description: 'Generate share URL',
      onClick: handleShareLink
    },
    { 
      icon: Code2, 
      label: 'View Source', 
      description: 'Open in new tab',
      onClick: handleViewSource
    },
  ];

  return (
    <div className="fixed top-0 left-0 right-0 z-50 bg-[#0a0a0a] border-b border-gray-800 shadow-lg">
      <div className="flex items-center justify-between h-14 px-4">
        {/* Left Side */}
        <div className="flex items-center space-x-3">
          {showBackButton && (
            <Button
              variant="ghost"
              size="sm"
              onClick={handleBack}
              className="h-8 w-8 p-0 hover:bg-gray-800 transition-colors"
            >
              <ArrowLeft className="h-4 w-4 text-gray-400" />
            </Button>
          )}
          
          <div className="flex flex-col">
            <h1 className="text-sm font-semibold text-white truncate max-w-xs sm:max-w-md">
              {projectTitle}
            </h1>
            {subtitle && (
              <p className="text-xs text-gray-400 truncate max-w-xs sm:max-w-md">
                {subtitle}
              </p>
            )}
          </div>
        </div>

        {/* Right Side */}
        <div className="flex items-center space-x-2">
          {copySuccess && (
            <div className="bg-green-600 text-white px-3 py-1 rounded-md text-xs flex items-center gap-1">
              <Check className="h-3 w-3" />
              {copySuccess}
            </div>
          )}

          {userCredits !== undefined && (
            <Badge variant="outline" className="text-xs border-gray-600 text-gray-300 hidden sm:flex">
              <Zap className="h-3 w-3 mr-1" />
              {userCredits} credits
            </Badge>
          )}

          <Button
            variant="ghost"
            size="sm"
            onClick={handleEnhancedAIAction}
            className="h-8 px-3 hover:bg-gray-800 transition-all duration-200 group hidden sm:flex"
            title="AI Actions & Suggestions"
          >
            <Zap className="h-4 w-4 text-yellow-500 group-hover:text-yellow-400 transition-colors" />
          </Button>

          <DropdownMenu open={isIntegrationsOpen} onOpenChange={setIsIntegrationsOpen}>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                className="h-8 px-3 text-gray-300 hover:bg-gray-800 transition-all duration-200 hidden md:flex"
              >
                <span className="text-xs font-medium">Integrations</span>
                <ChevronDown className={`h-3 w-3 ml-1 transition-transform duration-200 ${
                  isIntegrationsOpen ? 'rotate-180' : ''
                }`} />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent 
              align="end" 
              className="w-64 bg-[#1a1a1a] border-gray-700 shadow-xl"
            >
              <div className="px-3 py-2 text-xs font-medium text-gray-400 border-b border-gray-700">
                Connect & Configure
              </div>
              {integrations.map((integration, index) => (
                <DropdownMenuItem 
                  key={index}
                  onClick={integration.onClick}
                  className="p-3 hover:bg-gray-800 cursor-pointer transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    <integration.icon className="h-4 w-4 text-gray-400" />
                    <div className="flex-1">
                      <div className="text-sm font-medium text-white">
                        {integration.label}
                      </div>
                      <div className="text-xs text-gray-500">
                        {integration.description}
                      </div>
                    </div>
                    <ExternalLink className="h-3 w-3 text-gray-500" />
                  </div>
                </DropdownMenuItem>
              ))}
              <DropdownMenuSeparator className="bg-gray-700" />
              <DropdownMenuItem 
                onClick={handleManageIntegrations}
                className="p-3 hover:bg-gray-800 cursor-pointer"
              >
                <Settings className="h-4 w-4 text-gray-400 mr-3" />
                <span className="text-sm text-gray-300">Manage Integrations</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <DropdownMenu open={isExportOpen} onOpenChange={setIsExportOpen}>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                className="h-8 px-3 text-gray-300 hover:bg-gray-800 transition-all duration-200 hidden md:flex"
                disabled={Object.keys(projectFiles).length === 0}
              >
                <span className="text-xs font-medium">Export</span>
                <ChevronDown className={`h-3 w-3 ml-1 transition-transform duration-200 ${
                  isExportOpen ? 'rotate-180' : ''
                }`} />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent 
              align="end" 
              className="w-64 bg-[#1a1a1a] border-gray-700 shadow-xl"
            >
              <div className="px-3 py-2 text-xs font-medium text-gray-400 border-b border-gray-700">
                Export & Share
              </div>
              {exportOptions.map((option, index) => (
                <DropdownMenuItem 
                  key={index}
                  onClick={option.onClick}
                  className="p-3 hover:bg-gray-800 cursor-pointer transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    <option.icon className="h-4 w-4 text-gray-400" />
                    <div className="flex-1">
                      <div className="text-sm font-medium text-white">
                        {option.label}
                      </div>
                      <div className="text-xs text-gray-500">
                        {option.description}
                      </div>
                    </div>
                    {option.label === 'Export Code' && <Copy className="h-3 w-3 text-gray-500" />}
                    {option.label !== 'Export Code' && option.label !== 'Download ZIP' && (
                      <ExternalLink className="h-3 w-3 text-gray-500" />
                    )}
                  </div>
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                className="h-8 w-8 p-0 hover:bg-gray-800 transition-colors md:hidden"
              >
                <Settings className="h-4 w-4 text-gray-400" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent 
              align="end" 
              className="w-48 bg-[#1a1a1a] border-gray-700 shadow-xl md:hidden"
            >
              <DropdownMenuItem onClick={handleEnhancedAIAction} className="p-3">
                <Zap className="h-4 w-4 text-yellow-500 mr-3" />
                <span className="text-sm">AI Actions</span>
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setIsIntegrationsOpen(true)} className="p-3">
                <Database className="h-4 w-4 text-gray-400 mr-3" />
                <span className="text-sm">Integrations</span>
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setIsExportOpen(true)} className="p-3">
                <Download className="h-4 w-4 text-gray-400 mr-3" />
                <span className="text-sm">Export</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <Button
            onClick={onDeploy}
            disabled={!isDeployEnabled}
            className={`h-8 px-4 text-xs font-semibold transition-all duration-200 ${
              isDeployEnabled
                ? 'bg-blue-600 hover:bg-blue-700 hover:shadow-lg hover:scale-105 text-white'
                : 'bg-gray-700 text-gray-400 cursor-not-allowed'
            }`}
          >
            <Rocket className="h-3 w-3 mr-1.5" />
            Deploy
          </Button>
        </div>
      </div>
    </div>
  );
} 